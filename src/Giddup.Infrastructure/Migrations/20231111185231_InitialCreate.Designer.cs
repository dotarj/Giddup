// <auto-generated />
using System;
using Giddup.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Giddup.Infrastructure.Migrations
{
    [DbContext(typeof(GiddupDbContext))]
    [Migration("20231111185231_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Giddup.Infrastructure.Event", b =>
                {
                    b.Property<long>("Offset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Offset"));

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("AggregateVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Offset");

                    b.HasIndex("AggregateId", "AggregateVersion")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Giddup.Infrastructure.EventProjectionOffset", b =>
                {
                    b.Property<string>("AggregateType")
                        .HasColumnType("text");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("AggregateType");

                    b.ToTable("EventProjectionOffsets");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.OptionalReviewer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PullRequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Feedback")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "PullRequestId");

                    b.HasIndex("PullRequestId");

                    b.ToTable("OptionalReviewer");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AutoCompleteMode")
                        .HasColumnType("integer");

                    b.Property<int>("CheckForLinkedWorkItemsMode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TargetBranch")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("PullRequests");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.RequiredReviewer", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PullRequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Feedback")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "PullRequestId");

                    b.HasIndex("PullRequestId");

                    b.ToTable("RequiredReviewer");
                });

            modelBuilder.Entity("Giddup.Infrastructure.System.QueryModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e76dc39-633a-422d-a922-626c3c220e6b"),
                            FirstName = "Albert",
                            LastName = "Einstein"
                        },
                        new
                        {
                            Id = new Guid("769f1cfe-eaab-4a4f-9776-755b89dfb973"),
                            FirstName = "Isaac",
                            LastName = "Newton"
                        },
                        new
                        {
                            Id = new Guid("e9faa5fd-2832-4d47-ac55-0655a20e274e"),
                            FirstName = "Galileo",
                            LastName = "Galilei"
                        },
                        new
                        {
                            Id = new Guid("8dd689c0-7c67-4936-8e89-c4e4896396bc"),
                            FirstName = "Niels",
                            LastName = "Bohr"
                        });
                });

            modelBuilder.Entity("Giddup.Infrastructure.WorkItems.QueryModel.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("WorkItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06256a69-6160-4f38-9bc0-4e255fae4087"),
                            Title = "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                        },
                        new
                        {
                            Id = new Guid("ce037a68-9e4e-4a48-994b-f702dd63f102"),
                            Title = "In congue erat lacus, vitae iaculis turpis accumsan vel."
                        });
                });

            modelBuilder.Entity("PullRequestWorkItem", b =>
                {
                    b.Property<Guid>("PullRequestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkItemsId")
                        .HasColumnType("uuid");

                    b.HasKey("PullRequestsId", "WorkItemsId");

                    b.HasIndex("WorkItemsId");

                    b.ToTable("PullRequestWorkItem");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.OptionalReviewer", b =>
                {
                    b.HasOne("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", null)
                        .WithMany("OptionalReviewers")
                        .HasForeignKey("PullRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Giddup.Infrastructure.System.QueryModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", b =>
                {
                    b.HasOne("Giddup.Infrastructure.System.QueryModel.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.RequiredReviewer", b =>
                {
                    b.HasOne("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", null)
                        .WithMany("RequiredReviewers")
                        .HasForeignKey("PullRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Giddup.Infrastructure.System.QueryModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PullRequestWorkItem", b =>
                {
                    b.HasOne("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", null)
                        .WithMany()
                        .HasForeignKey("PullRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Giddup.Infrastructure.WorkItems.QueryModel.WorkItem", null)
                        .WithMany()
                        .HasForeignKey("WorkItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", b =>
                {
                    b.Navigation("OptionalReviewers");

                    b.Navigation("RequiredReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}

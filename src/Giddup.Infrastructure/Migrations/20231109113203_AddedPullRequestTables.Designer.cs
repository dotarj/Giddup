// <auto-generated />
using System;
using Giddup.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Giddup.Infrastructure.Migrations
{
    [DbContext(typeof(GiddupDbContext))]
    [Migration("20231109113203_AddedPullRequestTables")]
    partial class AddedPullRequestTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Giddup.Infrastructure.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("AggregateVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("AggregateId", "AggregateVersion")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.OptionalReviewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Feedback")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PullRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PullRequestId");

                    b.ToTable("OptionalReviewer");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AutoCompleteMode")
                        .HasColumnType("integer");

                    b.Property<int>("CheckForLinkedWorkItemsMode")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PullRequests");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.RequiredReviewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Feedback")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PullRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PullRequestId");

                    b.ToTable("RequiredReviewer");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.OptionalReviewer", b =>
                {
                    b.HasOne("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", null)
                        .WithMany("OptionalReviewers")
                        .HasForeignKey("PullRequestId");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.RequiredReviewer", b =>
                {
                    b.HasOne("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", null)
                        .WithMany("RequiredReviewers")
                        .HasForeignKey("PullRequestId");
                });

            modelBuilder.Entity("Giddup.Infrastructure.PullRequests.QueryModel.Models.PullRequest", b =>
                {
                    b.Navigation("OptionalReviewers");

                    b.Navigation("RequiredReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}
